type ParameterUpdate @entity(immutable: true) {
  "Unique ID for the parameter update."
  id: Bytes!

  "The parameter being updated."
  param: String!

  "The block number in which the update occurred."
  blockNumber: BigInt!

  "The timestamp of the block when the update occurred."
  blockTimestamp: BigInt!

  "The hash of the transaction that triggered the update."
  transactionHash: Bytes!
}

type SetController @entity(immutable: true) {
  "Unique ID for the controller setting event."
  id: Bytes!

  "Address of the new controller."
  controller: Bytes!

  "The block number in which the controller was set."
  blockNumber: BigInt!

  "The timestamp of the block when the controller was set."
  blockTimestamp: BigInt!

  "The hash of the transaction that triggered the setting of the controller."
  transactionHash: Bytes!
}

type Bond @entity {
  "Unique ID for the bonding instance."
  id: Bytes!

  "Address of the new delegate."
  newDelegate: Bytes!

  "Address of the old delegate (optional if this is the first time bonding)."
  oldDelegate: Bytes

  "Address of the delegator."
  delegator: Bytes!

  "Additional amount bonded in this instance."
  additionalAmount: BigInt!

  "Total amount bonded by the delegator."
  bondedAmount: BigInt!

  "The block number in which the bonding event occurred."
  blockNumber: BigInt!

  "The timestamp of the block when the bonding event occurred."
  blockTimestamp: BigInt!

  "The hash of the transaction that triggered the bonding event."
  transactionHash: Bytes!
}

type EarningsClaimed @entity {
  "Unique ID for each earnings claim event."
  id: Bytes!

  "Address of the delegate receiving the earnings."
  delegate: Bytes!

  "Address of the delegator claiming the earnings."
  delegator: Delegator!

  "Amount of rewards claimed during this event."
  rewards: BigInt!

  "Amount of fees claimed during this event."
  fees: BigInt!

  "Starting round of the rewards claim period."
  startRound: BigInt!

  "Ending round of the rewards claim period."
  endRound: BigInt!

  "The block number in which the earnings were claimed."
  blockNumber: BigInt!

  "The timestamp of the block when the earnings were claimed."
  blockTimestamp: BigInt!

  "The hash of the transaction that triggered the claim event."
  transactionHash: Bytes!
}

type Rebond @entity {
  "Unique ID for the rebonding event."
  id: Bytes!

  "Address of the delegate involved in the rebonding."
  delegate: Bytes!

  "Address of the delegator rebonding their stake."
  delegator: Delegator!

  "ID of the unbonding lock used for rebonding."
  unbondingLockId: BigInt!

  "Amount rebonded in this event."
  amount: BigInt!

  "The block number in which the rebonding event occurred."
  blockNumber: BigInt!

  "The timestamp of the block when the rebonding event occurred."
  blockTimestamp: BigInt!

  "The hash of the transaction that triggered the rebonding event."
  transactionHash: Bytes!
}

type Delegator @entity {
  "Unique ID for the delegator."
  id: Bytes!

  "The amount of bonded tokens."
  bondedAmount: BigInt!

  "The amount of fees collected by the delegator."
  fees: BigInt!

  "Address of the delegate this delegator is bonded to."
  delegateAddress: Bytes!

  "The total amount of tokens delegated to the delegator."
  delegatedAmount: BigInt!

  "The round in which the delegator's bond became effective."
  startRound: BigInt!

  "The last round in which the delegator claimed its earnings."
  lastClaimRound: BigInt!

  "The ID for the next unbonding lock created for the delegator."
  nextUnbondingLockId: BigInt!

  "Earnings claimed by this delegator."
  earnings: [EarningsClaimed!]! @derivedFrom(field: "delegator")

  "Unbonding locks created by this delegator."
  unbondingLocks: [UnbondingLock!]! @derivedFrom(field: "delegator")

  "Round earnings associated with this delegator."
  roundEarnings: [RoundEarnings!]! @derivedFrom(field: "delegator")
}


type UnbondingLock @entity {
  "Unique ID for the unbonding lock."
  id: Bytes!

  "Delegator associated with this lock."
  delegator: Delegator!

  "Amount of tokens being unbonded."
  amount: BigInt!

  "Round in which the unbonded tokens become available for withdrawal."
  withdrawRound: BigInt!

  "The block number in which the unbonding event occurred."
  blockNumber: BigInt!

  "The timestamp of the block when the unbonding event occurred."
  blockTimestamp: BigInt!

  "The hash of the transaction that triggered the unbonding event."
  transactionHash: Bytes!
}

type Round @entity {
  "Unique ID for the round (the round number)."
  id: String!

  "The block at which the round starts."
  startBlock: BigInt!

  "The block at which the round ends."
  endBlock: BigInt!

  "Indicates if the round is initialized."
  initialized: Boolean!

  "The total active stake for this round."
  totalActiveStake: BigInt!

  "The block number in which the round was recorded."
  blockNumber: BigInt!

  "The timestamp of the block when the round was recorded."
  blockTimestamp: BigInt!

  "Round earnings associated with this round."
  roundEarnings: [RoundEarnings!]! @derivedFrom(field: "round")
}


type RoundEarnings @entity {
  "Unique ID for the round earnings record. Can be a combination of delegator ID and round ID to ensure uniqueness."
  id: String!

  "Delegator associated with these round earnings."
  delegator: Delegator!

  "The round number in which these earnings were recorded."
  round: Round!

  "Amount of rewards earned by the delegator in this round."
  rewards: BigInt!

  "Amount of fees earned by the delegator in this round."
  fees: BigInt!

  "The block number in which the earnings were recorded."
  blockNumber: BigInt!

  "The timestamp of the block when the earnings were recorded."
  blockTimestamp: BigInt!
}

type PendingEarnings @entity {
  "Unique ID for the pending earnings record."
  id: Bytes!

  "Delegator associated with these pending earnings."
  delegator: Delegator!

  "Pending stake for the delegator in this round."
  pendingStake: BigInt! # Ensure this field is non-nullable.

  "Pending fees for the delegator in this round."
  pendingFees: BigInt!

  "The round number associated with these earnings."
  round: BigInt

  "The block number in which the fees were withdrawn."
  blockNumber: BigInt!

  "The timestamp of the block when the fees were withdrawn."
  blockTimestamp: BigInt!
}
